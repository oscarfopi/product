from .product import Product
from .dbcsv import DBbyCSV

SCHEMA = {
    'ID': {
        "type": "autoincrement",
    }, 
    'NAME': {
        "type": "string",
        "min_length": 3,
        "max_length": 20
    }, 
    "TYPE": {
        "type": "string",
        "min_length": 3,
        "max_length": 20
    }, 
    "PRICE": {
        "type": "string",
        "min_length": 3, 
        "max_length": 50
    }, 
    "UNIT": {
        'type': "int"
    }
}

class DBProducts(DBbyCSV):

    def __init__(self):
        super().__init__(SCHEMA, "products")


 def list_contacts(self):
        list_contacts = self.get_all()

        if not list_contacts:
            return None

        object_contacts = []
        # Convertimos los datos a objectos de tipo contact
        for contact in list_contacts:
            c = Contact(contact['ID'], contact['NAME'], contact['SURNAME'], contact['EMAIL'], contact['PHONE'], contact['BIRTHDAY'])
            object_contacts.append(c)

        return object_contacts

    
    def get_schema(self):
        return SCHEMA

    
def search_contacts(self, filters):
        if "NAME" not in filters and "TYPE" not in filters and "PRICE" not in filters:
            raise ValueError("Must send minimum one filter)

        list_products = self.get_by_filters(filters)
        return self._create_object_products(list_products)


    def _create_object_products(self, list_products):

        if not list_products:
            return None

        object_products = []
        # Convert data to objects type product 
        for product in list_products:
            c = Product(product["ID"], product["NAME"], product["TYPE"], product["PRICE"], product["UNIT"])
            object_products.append(c)

        return object_products

 def list_products(self):
        list_products = self.get_all()
        return self._create_object_products(list_products)


    def update_product(self, id_object, data):
        if not id_object:
            raise ValueError("Must send contact id ")
        if not data:
            raise ValueError("Must send minimum one parameter to actualice ")
        self.update(id_object, data)


